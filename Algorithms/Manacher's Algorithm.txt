Manacher's Algorithm - Linear Time Longest Palindromic Substring(LPS)
geeksforgeeks

string length = n
We take 2n+1 centres and keep track of LPS for every centre.

LPS[i]

i odd => LPS[i] odd , >=1
i even => LPS[i] even , >=0

Position and index for the string are two different things here.
For a given string S of length N, indexes will be from 0 to N-1 
(total N indexes) and positions will be from 0 to 2*N 
(total 2*N+1 positions).

L[i]=d implies
Substring from position i-d to i+d is a palindrome of length d (in terms of position)
Substring from index (i-d)/2 to [(i+d)/2 – 1] is a palindrome of length d (in terms of index)

If there is a palindrome in a string centered at some position, 
then LPS length values around the center position may or may not be symmetric depending on some situation. 
If we can identify the situation when left and right positions WILL BE SYMMETRIC around the center position, 
we NEED NOT calculate LPS length of the right position because it will be exactly same as LPS value of 
corresponding position on the left side which is already known.

centerPosition – This is the position for which LPS length is calculated and let’s say LPS length at centerPosition is d (i.e. L[centerPosition] = d)
centerRightPosition – This is the position which is right to the centerPosition and d position away from centerPosition (i.e. centerRightPosition = centerPosition + d)
centerLeftPosition – This is the position which is left to the centerPosition and d position away from centerPosition (i.e. centerLeftPosition = centerPosition – d)
currentRightPosition – This is the position which is right of the centerPosition for which LPS length is not yet known and has to be calculated
currentLeftPosition – This is the position on the left side of centerPosition which corresponds to the currentRightPosition
centerPosition – currentLeftPosition = currentRightPosition – centerPosition
currentLeftPosition = 2* centerPosition – currentRightPosition
i-left palindrome – The palindrome i positions left of centerPosition, i.e. at currentLeftPosition
i-right palindrome – The palindrome i positions right of centerPosition, i.e. at currentRightPosition
center palindrome – The palindrome at centerPosition

When we are at centerPosition for which LPS length is known, then we also know LPS length of all positions smaller than centerPosition. Let’s say LPS length at centerPosition is d, i.e.
L[centerPosition] = d
Let’s say we are at currentRightPosition ( > centerPosition) where we need to find LPS length.
For this we look at LPS length of currentLeftPosition which is already calculated.

case 1
if L[currentLeftPosition]< centerRightPosition-currentRightPosition
L[currentRightPosition]=L[currentLeftPosition]

case 2
L[currentLeftPosition] = centerRightPosition – currentRightPosition
centerRightPosition=2n
centerRightPosition is the extreme end position of the string. That means center palindrome is suffix of input string.
then L[currentRightPosition]=L[currentLeftPosition]

The longest palindrome i places to the right of the current center (the i-right palindrome) 
is as long as the longest palindrome i places to the left of the current center (the i-left palindrome) 
if the i-left palindrome is completely contained in the longest palindrome around the current center (the center palindrome) 
and the i-left palindrome is not a prefix of the center palindrome (Case 1) or (i.e. when i-left palindrome is a prefix of center palindrome) 
if the center palindrome is a suffix of the entire string (Case 2).

n Case 1 and Case 2, i-right palindrome can’t expand more than corresponding i-left palindrome
so LPS length of i-right palindrome is exactly same as LPS length of i-left palindrome.

Case 1: L[currentRightPosition] = L[currentLeftPosition] applies when:

i-left palindrome is completely contained in center palindrome
i-left palindrome is NOT a prefix of center palindrome
Both above conditions are satisfied when
L[currentLeftPosition] < centerRightPosition – currentRightPosition

Case 2: L[currentRightPosition] = L[currentLeftPosition] applies when:

i-left palindrome is prefix of center palindrome (means completely contained also)
center palindrome is suffix of input string
Above conditions are satisfied when
L[currentLeftPosition] = centerRightPosition – currentRightPosition (For 1st condition) AND
centerRightPosition = 2*N where N is input string length N (For 2nd condition).


Case 3: L[currentRightPosition] > = L[currentLeftPosition] applies when:

i-left palindrome is prefix of center palindrome (and so i-left palindrome is completely contained in center palindrome)
center palindrome is NOT suffix of input string
Above conditions are satisfied when
L[currentLeftPosition] = centerRightPosition – currentRightPosition (For 1st condition) AND
centerRightPosition < 2*N where N is input string length N (For 2nd condition).
In this case, there is a possibility of i-right palindrome expansion and so length of i-right palindrome is at least as long as length of i-left palindrome.

Case 4: L[currentRightPosition] > = centerRightPosition – currentRightPosition applies when:

i-left palindrome is NOT completely contained in center palindrome
Above condition is satisfied when
L[currentLeftPosition] > centerRightPosition – currentRightPosition
In this case, length of i-right palindrome is at least as long (centerRightPosition – currentRightPosition) and there is a possibility of i-right palindrome expansion.

We change centerPosition to currentRightPosition if palindrome centered at currentRightPosition expands beyond centerRightPosition.